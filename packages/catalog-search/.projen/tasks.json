{
  "tasks": {
    "clobber": {
      "name": "clobber",
      "category": "30.maintain",
      "description": "hard resets to HEAD of origin and cleans the local repo",
      "env": {
        "BRANCH": "$(git branch --show-current)"
      },
      "steps": [
        {
          "exec": "git checkout -b scratch",
          "name": "save current HEAD in \"scratch\" branch"
        },
        {
          "exec": "git checkout $BRANCH"
        },
        {
          "exec": "git fetch origin",
          "name": "fetch latest changes from origin"
        },
        {
          "exec": "git reset --hard origin/$BRANCH",
          "name": "hard reset to origin commit"
        },
        {
          "exec": "git clean -fdx",
          "name": "clean all untracked files"
        },
        {
          "say": "ready to rock! (unpushed commits are under the \"scratch\" branch)"
        }
      ],
      "condition": "git diff --exit-code > /dev/null"
    },
    "bump": {
      "name": "bump",
      "category": "20.release",
      "description": "Bumps version based on latest git tag and generates a changelog entry",
      "steps": [
        {
          "exec": "git -c \"versionsort.suffix=-\" tag --sort=\"-version:refname\" --list \"v*\" | head -n1 > .version.tmp.json"
        },
        {
          "exec": "standard-version"
        }
      ],
      "condition": "! git log --oneline -1 | grep -q \"chore(release):\""
    },
    "unbump": {
      "name": "unbump",
      "category": "20.release",
      "description": "Restores version to 0.0.0",
      "steps": [
        {
          "exec": "standard-version -r 0.0.0"
        }
      ]
    },
    "compile": {
      "name": "compile",
      "category": "00.build",
      "description": "Only compile",
      "steps": [
        {
          "exec": "tsc"
        }
      ]
    },
    "test:compile": {
      "name": "test:compile",
      "category": "10.test",
      "description": "compiles the test code",
      "steps": [
        {
          "exec": "tsc --noEmit --project tsconfig.jest.json"
        }
      ]
    },
    "test": {
      "name": "test",
      "category": "10.test",
      "description": "Run tests",
      "steps": [
        {
          "exec": "rm -fr lib/"
        },
        {
          "spawn": "test:compile"
        },
        {
          "exec": "jest --passWithNoTests --all"
        },
        {
          "spawn": "eslint"
        }
      ]
    },
    "build": {
      "name": "build",
      "steps": [
        {
          "exec": "yarn compile && yarn test",
          "description": "Deletes then Creates a Cluster"
        }
      ]
    },
    "test:watch": {
      "name": "test:watch",
      "category": "10.test",
      "description": "Run jest in watch mode",
      "steps": [
        {
          "exec": "jest --watch"
        }
      ]
    },
    "test:update": {
      "name": "test:update",
      "category": "10.test",
      "description": "Update jest snapshots",
      "steps": [
        {
          "exec": "jest --updateSnapshot"
        }
      ]
    },
    "projen:upgrade": {
      "name": "projen:upgrade",
      "category": "30.maintain",
      "description": "upgrades projen to the latest version",
      "steps": [
        {
          "exec": "yarn upgrade -L projen"
        },
        {
          "exec": "CI=\"\" yarn projen"
        }
      ]
    },
    "default": {
      "name": "default",
      "steps": [
        {
          "exec": "node .projenrc.js"
        }
      ]
    },
    "watch": {
      "name": "watch",
      "category": "00.build",
      "description": "Watch & compile in the background",
      "steps": [
        {
          "exec": "tsc -w"
        }
      ]
    },
    "package": {
      "name": "package",
      "category": "20.release",
      "description": "Create an npm tarball",
      "steps": [
        {
          "exec": "rm -fr dist"
        },
        {
          "exec": "mkdir -p dist/js"
        },
        {
          "exec": "yarn pack"
        },
        {
          "exec": "mv *.tgz dist/js/"
        }
      ]
    },
    "eslint": {
      "name": "eslint",
      "category": "10.test",
      "description": "Runs eslint against the codebase",
      "steps": [
        {
          "exec": "eslint --ext .ts,.tsx --fix --no-error-on-unmatched-pattern src test build-tools .projenrc.js"
        }
      ]
    },
    "synth": {
      "name": "synth",
      "steps": [
        {
          "exec": "npm run compile && cdk8s synth",
          "description": "Compiles & Synthesizes cdk8s.yml"
        }
      ]
    },
    "kind:create": {
      "name": "kind:create",
      "steps": [
        {
          "exec": "scripts/create-kind-cluster.sh",
          "description": "Creates a Cluster"
        }
      ]
    },
    "kind:delete": {
      "name": "kind:delete",
      "steps": [
        {
          "exec": "scripts/delete-kind-cluster.sh",
          "description": "Deletes a Cluster"
        }
      ]
    },
    "kind:recreate": {
      "name": "kind:recreate",
      "steps": [
        {
          "exec": "npm run kind:delete && npm run kind:create",
          "description": "Deletes then Creates a Cluster"
        }
      ]
    },
    "kind:redeploy": {
      "name": "kind:redeploy",
      "steps": [
        {
          "exec": "npm run kind:recreate && npm run kind:connect && npm run kind:apply && npm run kube:wait",
          "description": "Recreates, Connects, Applies & Waits"
        }
      ]
    },
    "kind:connect": {
      "name": "kind:connect",
      "steps": [
        {
          "exec": "kubectl config use-context kind-kind",
          "description": "Connects using the context kind-kind"
        }
      ]
    },
    "kind:apply": {
      "name": "kind:apply",
      "steps": [
        {
          "exec": "npm run synth && npm run kind:connect && kubectl apply -f dist/catalogsearchkind.k8s.yaml",
          "description": "Synthesizes, Connects and applies catalogsearchkind"
        }
      ]
    },
    "eks:connect": {
      "name": "eks:connect",
      "steps": [
        {
          "exec": "kubectl config use-context arn:aws:eks:${AWS_REGION}:${AWS_ACCOUNT}:cluster/SearchKubernetes8BEC1CD3-fb8a111e81ac46d998c4d56666e588ba",
          "description": "Switches kubectl to arn:::::cluster/SearchKubernetes8BEC1CD3-fb8a111e81ac46d998c4d56666e588ba"
        }
      ]
    },
    "eks:apply": {
      "name": "eks:apply",
      "steps": [
        {
          "exec": "npm run synth && npm run eks:connect && kubectl apply -f dist/catalogsearcheks.k8s.yaml",
          "description": "Synthesizes, switches to eks kubectl and applies"
        }
      ]
    },
    "kube:dashboard-token": {
      "name": "kube:dashboard-token",
      "steps": [
        {
          "exec": "kubectl -n kubernetes-dashboard describe secret $(kubectl -n kubernetes-dashboard get secret | grep adminuser | awk '{print $1}')",
          "description": "Gets kubernetes dashboard admin token"
        }
      ]
    },
    "kube:dashboard": {
      "name": "kube:dashboard",
      "steps": [
        {
          "exec": "npm run kube:dashboard-token && npm run kube:proxy",
          "description": "Gets dashboard-token and runs kube proxy"
        }
      ]
    },
    "elastic:ping": {
      "name": "elastic:ping",
      "steps": [
        {
          "exec": "curl -u \"elastic:$(kubectl get secret elasticsearch-es-elastic-user -o go-template='{{.data.elastic | base64decode}}')\" -k http://localhost:9200",
          "description": "Gets the ES Elastic User Secret from localhost:9200 kubernetes manifest"
        }
      ]
    },
    "kube:elastic-password": {
      "name": "kube:elastic-password",
      "steps": [
        {
          "exec": "kubectl get secret elasticsearch-es-elastic-user -o go-template='{{.data.elastic | base64decode}}'",
          "description": "Gets the ES Elastic User Secret from manifest"
        }
      ]
    },
    "kube:elastic-logs": {
      "name": "kube:elastic-logs",
      "steps": [
        {
          "exec": "kubectl logs $(kubectl get -A pods | grep elasticsearch | awk '{print $2}')",
          "description": "Shows the logs for ALL pods with a name *elasticsearch*"
        }
      ]
    },
    "kube:elastic-forward": {
      "name": "kube:elastic-forward",
      "steps": [
        {
          "exec": "kubectl port-forward service/kibana-kb-http 5601",
          "description": "Forwards 5601 to service-kibana-kb-http"
        }
      ]
    },
    "kube:wait": {
      "name": "kube:wait",
      "steps": [
        {
          "exec": "kube:proxy\": \"kubectl proxy",
          "description": "Runs kubectl proxy"
        }
      ]
    }
  },
  "env": {
    "PATH": "$(npx -c \"node -e \\\"console.log(process.env.PATH)\\\"\")"
  },
  "//": "~~ Generated by projen. To modify, edit .projenrc.js and run \"npx projen\"."
}
